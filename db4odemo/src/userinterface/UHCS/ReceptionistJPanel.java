/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.UHCS;

import Business.Complaint.Complaint;
import Business.EcoSystem;
import Business.Student.Student;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author fianrodrigues
 */
public class ReceptionistJPanel extends javax.swing.JPanel
{

    /**
     * Creates new form ReceptionistJPanel
     */
    JPanel userProcessContainer;
    UserAccount account;
    EcoSystem system;
    Complaint mainComplaint;
    ArrayList<Complaint> complaintListWorkQueue;       //WorkRequest is complaint
    int selectedRow = -1;
    
    public ReceptionistJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem system) 
    {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;     // logged user; UserAccount has both Employee (basic details) & WorkQueue (complaintlist)
        this.system = system;
        complaintListWorkQueue = this.account.getWorkQueue().getComplaintList();       //Work Queue is holding ComplaintList
        
        
        disableAll();
        
        populateTable();
    }
    
    public void disableAll() {
        
        btnAcceptCase.setEnabled(false);
        btnAssignDoctor.setEnabled(false);
        btnUhcsCompleted.setEnabled(false);
    }
    
    //Method to populate Open (pending) complaints under UHCS Complaints
    public void populateTable() {   
        //newly getting values
        complaintListWorkQueue = this.account.getWorkQueue().getComplaintList();
        
        DefaultTableModel md=(DefaultTableModel)tblComplaintsWithOpenStatus.getModel();
        md.setRowCount(0);
        Object row[]= new Object[8];
        
        for(Complaint complaintWorkRequest : complaintListWorkQueue){
            
            if (complaintWorkRequest.getStatus()!=null && complaintWorkRequest.getStatus().startsWith("UHCS")) {
            
                if (!"UHCS Completed".equals(complaintWorkRequest.getStatus())) {
                    row[0] = complaintWorkRequest; //in toString it is ID
                    row[1] = complaintWorkRequest.getTypeOfComplaint();
                    row[2] = complaintWorkRequest.getVictimStudent().getName();
                    row[3] = complaintWorkRequest.getDateOfIncident();
                    row[4] = complaintWorkRequest.getTypeOfIncident();
                    row[5] = complaintWorkRequest.getDescription();
                    row[6] = complaintWorkRequest.getDescription(); //must be feedback
                    row[7] = complaintWorkRequest.getStatus();
                     
                    md.addRow(row);
                    btnDecide.setEnabled(true); 
                }
            }
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblComplaintsWithOpenStatus = new javax.swing.JTable();
        lblTitle = new javax.swing.JLabel();
        btnRefreshStatus = new javax.swing.JButton();
        btnAcceptCase = new javax.swing.JButton();
        btnAssignDoctor = new javax.swing.JButton();
        btnUhcsCompleted = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnDecide = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblSelectedTable = new javax.swing.JTable();
        btnClearSelection = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 153, 153));
        setLayout(null);

        tblComplaintsWithOpenStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Type of Complaint", "Victim", "Date Of Incident", "Type of Incident", "Description", "Feedback", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblComplaintsWithOpenStatus.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(tblComplaintsWithOpenStatus);
        tblComplaintsWithOpenStatus.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        add(jScrollPane1);
        jScrollPane1.setBounds(20, 173, 696, 107);

        lblTitle.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("PENDING COMPLAINTS LISTS");
        add(lblTitle);
        lblTitle.setBounds(0, 50, 960, 59);

        btnRefreshStatus.setText("Refresh");
        btnRefreshStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshStatusActionPerformed(evt);
            }
        });
        add(btnRefreshStatus);
        btnRefreshStatus.setBounds(610, 130, 100, 29);

        btnAcceptCase.setText("Accept Case");
        btnAcceptCase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptCaseActionPerformed(evt);
            }
        });
        add(btnAcceptCase);
        btnAcceptCase.setBounds(57, 465, 121, 29);

        btnAssignDoctor.setText("Assign Doctor");
        btnAssignDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignDoctorActionPerformed(evt);
            }
        });
        add(btnAssignDoctor);
        btnAssignDoctor.setBounds(190, 470, 134, 29);

        btnUhcsCompleted.setText("UHCS Completed & Notify Chief Officier");
        btnUhcsCompleted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUhcsCompletedActionPerformed(evt);
            }
        });
        add(btnUhcsCompleted);
        btnUhcsCompleted.setBounds(350, 500, 295, 29);

        jLabel1.setText("Open Complaints under UHCS:");
        add(jLabel1);
        jLabel1.setBounds(20, 151, 192, 16);

        btnDecide.setText("Decide");
        btnDecide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecideActionPerformed(evt);
            }
        });
        add(btnDecide);
        btnDecide.setBounds(734, 214, 87, 29);

        jLabel2.setText("Selected Complaint for Deciding:");
        add(jLabel2);
        jLabel2.setBounds(20, 345, 207, 16);

        tblSelectedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Type of Complaint", "Victim", "Date Of Incident", "Type of Incident", "Description", "Feedback", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblSelectedTable);
        tblSelectedTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        add(jScrollPane3);
        jScrollPane3.setBounds(20, 379, 696, 58);

        btnClearSelection.setText("Clear Selection");
        btnClearSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearSelectionActionPerformed(evt);
            }
        });
        add(btnClearSelection);
        btnClearSelection.setBounds(734, 389, 137, 29);

        btnBack.setText("< Go Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack);
        btnBack.setBounds(0, 20, 103, 29);

        jLabel3.setText("Close the case from UHCS side:");
        add(jLabel3);
        jLabel3.setBounds(360, 480, 198, 16);
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshStatusActionPerformed
        
        disableAll();
        
        // clear selected table
        DefaultTableModel model = (DefaultTableModel) tblSelectedTable.getModel();
        model.setRowCount(0);
        
        //repopulates main table
        populateTable();
    }//GEN-LAST:event_btnRefreshStatusActionPerformed

    private void btnAcceptCaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptCaseActionPerformed
        Complaint complaintWorkRequest = (Complaint) tblSelectedTable.getValueAt(0, 0);
        complaintWorkRequest.setStatus("UHCS Accepted");
        
        mainComplaint=system.getComplaintDirectory().getComplaint(complaintWorkRequest.getComplaintID());
        mainComplaint.setReceptionistAccepted(true);
//enable buttons
        btnAssignDoctor.setEnabled(true);
        btnAcceptCase.setEnabled(false);
        
        //update tables
        populateSelectedTable(complaintWorkRequest);
        populateTable();
    }//GEN-LAST:event_btnAcceptCaseActionPerformed

    private void btnDecideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecideActionPerformed
        
        
        selectedRow = tblComplaintsWithOpenStatus.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
            return;
        }
        disableAll();
        //cant add another to selected table
        btnDecide.setEnabled(false);
        
        Complaint complaintWorkRequest = (Complaint) tblComplaintsWithOpenStatus.getValueAt(selectedRow, 0);
        
        populateSelectedTable(complaintWorkRequest);
        
        String status = String.valueOf(complaintWorkRequest.getStatus());
        if ("UHCS New".equals(status)) {
            btnAcceptCase.setEnabled(true);
        } else if ("UHCS Accepted".equals(status)) {
            btnAssignDoctor.setEnabled(true);
            btnAcceptCase.setEnabled(false);
        } else if ("UHCS Doctor Completed".equals(status)) { // button not to be enabled for all statuses from "UHCS Assigned Doctor" till before this
            btnUhcsCompleted.setEnabled(true);
            btnAssignDoctor.setEnabled(false);
            btnAcceptCase.setEnabled(false);
        } else if ("UHCS Advisor Completed".equals(status)) {
            btnUhcsCompleted.setEnabled(true);
            btnAssignDoctor.setEnabled(false);
            btnAcceptCase.setEnabled(false);
        } 
    
    }//GEN-LAST:event_btnDecideActionPerformed
    
    public void populateSelectedTable(Complaint complaintWorkRequest) {
        DefaultTableModel md=(DefaultTableModel)tblSelectedTable.getModel();
        md.setRowCount(0);
        Object row[]= new Object[8];
        
        row[0] = complaintWorkRequest; //in toString it is ID
        row[1] = complaintWorkRequest.getTypeOfComplaint();
        row[2] = complaintWorkRequest.getVictimStudent().getName();
        row[3] = complaintWorkRequest.getDateOfIncident();
        row[4] = complaintWorkRequest.getTypeOfIncident();
        row[5] = complaintWorkRequest.getDescription();
        row[6] = complaintWorkRequest.getDescription(); //must be feedback
        row[7] = complaintWorkRequest.getStatus();
                     
        md.addRow(row);
        
    }
    
    private void btnClearSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearSelectionActionPerformed
        //equivalent to refresh
        
        disableAll();
        // clear selected table
        DefaultTableModel model = (DefaultTableModel) tblSelectedTable.getModel();
        model.setRowCount(0);
        
        //repopulates main table
        populateTable();
        
        //back screen
    }//GEN-LAST:event_btnClearSelectionActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        
        disableAll();
        // clear table
        DefaultTableModel model = (DefaultTableModel) tblSelectedTable.getModel();
        model.setRowCount(0);
        
        //back page
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnUhcsCompletedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUhcsCompletedActionPerformed
              
        //status to be changed into "UHCS Completed"
        Complaint complaintWorkRequest = (Complaint) tblComplaintsWithOpenStatus.getValueAt(selectedRow, 0);
        complaintWorkRequest.setStatus("UHCS Completed");
        
        //original complaint updation
        Complaint originalObject = system.getComplaintDirectory().getComplaint(complaintWorkRequest.getComplaintID());
        if (originalObject.getTypeOfIncident().equals("Injury")) {
            originalObject.setStatus("CaseClosed");
        } else if (originalObject.getTypeOfIncident().equals("Sexual Assault")) {
            originalObject.setStatus("UHCS Completed");
        }
        originalObject.setUHCS(false);
        originalObject.setDoctorFeedback(complaintWorkRequest.getDoctorFeedback());
        originalObject.setAdvisorFeedback(complaintWorkRequest.getAdvisorFeedback());
        
        //update in student's complaint
        Student originalStudent = system.getStudentDirectory().getStudent(complaintWorkRequest.getVictimStudent().getUsername());
            if (originalStudent !=null) {        
                Complaint originalStudentComplaint = originalStudent.getMyComplaint(complaintWorkRequest.getComplaintID());
                if (originalStudentComplaint!=null) {
                    originalObject.setUHCS(false);
                    originalObject.setDoctorFeedback(complaintWorkRequest.getDoctorFeedback());
                    originalObject.setAdvisorFeedback(complaintWorkRequest.getAdvisorFeedback());
                }
            }
        
        JOptionPane.showMessageDialog(null,"UHCS, thats a great job of closing the complaint. Thank you!");
        
        //then we refresh button to see complaint moved to old status table
        disableAll();
        // clear table
        DefaultTableModel model = (DefaultTableModel) tblSelectedTable.getModel();
        model.setRowCount(0);
        //repopulates table with that complaint gone
        populateTable();
    }//GEN-LAST:event_btnUhcsCompletedActionPerformed

    private void btnAssignDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignDoctorActionPerformed
        Complaint complaintWorkRequest = (Complaint) tblSelectedTable.getValueAt(0, 0);
        
        //status is set in next page
        //enable buttons
        btnAssignDoctor.setEnabled(false);
        
        //move to next page
        AssignDoctorJPanel assignDoctorPage = new AssignDoctorJPanel(userProcessContainer,account,complaintWorkRequest,system);
        userProcessContainer.add("Assign Doctor Page",assignDoctorPage);
        CardLayout layout=(CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
                
        //update tables - this will be done, when moved from next page
        /*populateSelectedTable(complaintWorkRequest);
        populateTable();*/
    }//GEN-LAST:event_btnAssignDoctorActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAcceptCase;
    private javax.swing.JButton btnAssignDoctor;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClearSelection;
    private javax.swing.JButton btnDecide;
    private javax.swing.JButton btnRefreshStatus;
    private javax.swing.JButton btnUhcsCompleted;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblComplaintsWithOpenStatus;
    private javax.swing.JTable tblSelectedTable;
    // End of variables declaration//GEN-END:variables
}
